<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.4" reference="SyntaxHighlighting.EnableSyntaxHighlighting" locale="">
  <web>SyntaxHighlighting</web>
  <name>EnableSyntaxHighlighting</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>SyntaxHighlighting.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Syntax Highlighting Code</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content/>
  <object>
    <name>SyntaxHighlighting.EnableSyntaxHighlighting</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>56c97c33-0347-474b-99b9-7b257b82a80c</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery', '$xwiki.getURL('SyntaxHighlighting.SyntaxHighlighting', 'jsx', "minify=$!services.debug.minify")', 'xwiki-events-bridge'], function($, SH) {
  /* Initialize the CodeMirror library and then start registering the extra modules. */
  var initCodeMirrorInternals = function() {
    initCodeMirrors();

    // Override the insertTags method for the wiki syntax editor so that we can intercept commands from
    // the attached toolbar and execute them on the CodeMirror instance instead of the simple textarea
    if (XWiki.editor == 'wiki' &amp;&amp; typeof insertTags !== 'undefined') {
      insertTags = function(tagOpen, tagClose, sampleText) {
        var codeMirror = SH.codeMirrors[0];
        if (!codeMirror) {
          return;
        }
        codeMirror.replaceSelection(tagOpen + (codeMirror.doc.getSelection() || sampleText) + tagClose, 'end');
      }
    // Starting with XWiki 17.8.0RC1 the toolbar is now defined as an object allowing to replace the insertTag function.
    } else if (XWiki.editor == 'wiki' &amp;&amp; typeof XWiki.editors.SimpleToolbar !== 'undefined') {
      let codeMirrorInsertTag = function(textarea, tagOpen, tagClose, sampleText) {
        for (let codeMirror of SH.codeMirrors) {
          if (codeMirror.getTextArea() === textarea) {
            codeMirror.replaceSelection(tagOpen + (codeMirror.doc.getSelection() || sampleText) + tagClose, 'end');
            break;
          }
        }
      };
      XWiki.editors.SimpleToolbar.setInsertTagFunction(codeMirrorInsertTag);
    }
  }

  /* Initialize all possible CodeMirror instances. */
  var initCodeMirrors = function () {
    // Use the theme chosen in the wiki's administration and passed in the request.
    var theme = "$!{request.theme}";
    if(!theme) theme = 'default';
    SH.setTheme(theme);

    var options = [[], {
      extraKeys : {
        // Fullscreen on
        'F11' : function(cm) {
          var editorDiv = cm.getWrapperElement();
          if (!editorDiv.hasClassName('CodeMirror-fullscreen')) {
            var fullScreenActivatorElement = editorDiv.up().select('.fullScreenEditButton', '.fullScreenEditLink')[0];
            fullScreenActivatorElement.click();
          }
        },
        // Fullscreen off
        'Esc' : function(cm) {
          var editorDiv = cm.getWrapperElement();
          if (editorDiv.hasClassName('CodeMirror-fullscreen')) {
            var fullScreenDeactivatorElement = $$('.bottombuttons')[0].down('.button');
            fullScreenDeactivatorElement.click();
          }
        }
      },
      lineWrapping : "$!{request.lineWrapping}" == 'true'
    }];
    if (XWiki.editor == 'object' || XWiki.editor == 'inline') {
      // Object editor highlighting support
      var augmentObjectEditor = function (contextSelector) {
        SH.initCodeMirror("textarea[id^='XWiki.StyleSheetExtension_'][id$='_code']", 'css', options, contextSelector);
        SH.initCodeMirror("textarea[id^='XWiki.JavaScriptExtension_'][id$='_code']", 'javascript', options, contextSelector);
        SH.initCodeMirror("textarea[id^='XWiki.XWikiSkins_'][id$='.css']", 'css', options, contextSelector);
        SH.initCodeMirror("textarea[id^='XWiki.XWikiSkins_'][id$='.js']", 'javascript', options, contextSelector);
        SH.initCodeMirror("textarea[id^='XWiki.XWikiSkins_'][id$='.vm']", 'velocity', options, contextSelector);
        SH.initCodeMirror("textarea[id^='XWiki.WikiMacroClass_'][id$='_code']", XWiki.docsyntax, options, contextSelector);
        SH.initCodeMirror("textarea[id^='Panels.PanelClass_'][id$='_content']", XWiki.docsyntax, options, contextSelector);
        SH.initCodeMirror("textarea[id^='XWiki.UIExtensionClass_'][id$='_content']", XWiki.docsyntax, options, contextSelector);
        SH.initCodeMirror("textarea[id^='XWiki.SchedulerJobClass_'][id$='_script']", 'groovy', options, contextSelector);
        SH.initCodeMirror("textarea[id^='XWiki.ComponentMethodClass_'][id$='_code']", XWiki.docsyntax, options, contextSelector);
        SH.initCodeMirror("textarea[id^='XWiki.ConfigurableClass_'][id$='_codeToExecute']", XWiki.docsyntax, options, contextSelector);
        SH.initCodeMirror("textarea[id^='XWiki.Mail_'][id$='_text']", 'velocity', options, contextSelector);
        SH.initCodeMirror("textarea[id^='XWiki.Mail_'][id$='_html']", 'velocity', options, contextSelector);
      };
      augmentObjectEditor();
      $(document).on('xwiki:dom:updated', function (event, data) {
        var selector = (data.elements) ? data.elements : undefined;
        augmentObjectEditor(selector);
      });
    } else if (XWiki.editor == 'wiki') {
      // Document content editor highlighting support using the document's syntax.
      SH.initCodeMirror("textarea[id='content']", XWiki.docsyntax, options);
    }
  }
  /**
   * Entry point.
   */
  if (XWiki.domIsLoaded &amp;&amp; XWiki.contextaction == 'edit') {
    initCodeMirrorInternals();
  } else {
    $(document).on('xwiki:dom:loaded', function() {
      // Try not to pollute the other XWiki actions with CodeMirror specific code
      if (XWiki.contextaction == 'edit')
        initCodeMirrorInternals();
    });
  }
});

(function() {
if (XWiki.contextaction == 'edit') {

  /* Synchronize the original textareas' contents with the codemirrors' contents just before saving the page. */
  document.observe('xwiki:actions:save', function(event){
    var codeMirrors = $$('.CodeMirror');
    for (var i=0; i &lt; codeMirrors.length; ++i) {
      codeMirrors[i].CodeMirror.save();
    }
  });

  /*
   * Fullscreen handling
   */

  /* Before going into fullscreen editing, record the element's original dimensions. */
  document.observe('xwiki:fullscreen:enter', function(event) {
    var codeMirror = getCodeMirrorFromFullScreenEvent(event);
    if (!codeMirror) {
      // Something else is entering fullscreen.
      return;
    }
    var editorDiv = codeMirror.getWrapperElement();
    // Height as an integer (pixels), Width as percent string
    toggleFullscreenEditing.dimensionsBeforeFullscreen = {
      // px
      height: editorDiv.clientHeight,
      // x%
      width: editorDiv.style.width
    };
    toggleFullscreenEditing.scrollBeforeFullscreen = document.viewport.getScrollOffsets();
  });

  /* Full screen editing when pressing the maximize button/link. */
  document.observe('xwiki:fullscreen:entered', function(event) {
    var codeMirror = getCodeMirrorFromFullScreenEvent(event);
    if (!codeMirror) {
      // Something else entered fullscreen.
      return;
    }
    toggleFullscreenEditing(codeMirror, true);
  });

  /* Fullscreen left by pressing the bottom button. */
  document.observe('xwiki:fullscreen:exited', function(event) {
    var codeMirror = getCodeMirrorFromFullScreenEvent(event);
    if (!codeMirror) {
      // Something else exited fullscreen.
      return;
    }
    toggleFullscreenEditing(codeMirror, false);
  });

  var getCodeMirrorFromFullScreenEvent = function(event) {
    var codeMirrorTextArea;
    if(event.memo) {
      var originalTextArea = event.memo.target;
      codeMirrorTextArea = originalTextArea.up().down('.CodeMirror textarea');
    }
    else if(event.explicitOriginalTarget) {
      codeMirrorTextArea = event.explicitOriginalTarget;
    }
    var codeMirrors = $$('.CodeMirror');
    var codeMirror = getCodeMirrorFromInternalTextArea(codeMirrorTextArea, codeMirrors);
    return codeMirror;
  }

  var getCodeMirrorFromInternalTextArea = function(textArea, codeMirrors) {
    for(var j=0; j&lt;codeMirrors.length; ++j) {
      var codeMirror = codeMirrors[j].CodeMirror;
      var codeMirrorTextArea = codeMirror.getInputField();
      if (textArea == codeMirrorTextArea) {
        return codeMirror;
      }
    }
  }

  /* Display the given codeMirror instance in full screen. */
  var toggleFullscreenEditing = function (codeMirror, enabled) {
    var editorDiv = codeMirror.getWrapperElement();
    if (enabled) {
      editorDiv.addClassName('CodeMirror-fullscreen');

      // Set proper dimensions
      editorDiv.style.height = getNewCodeMirrorHeightInFullscreen() + 'px';
      editorDiv.style.width ='100%';
    } else {
      editorDiv.removeClassName('CodeMirror-fullscreen');

      // Restore the editor's dimensions
      editorDiv.style.height = toggleFullscreenEditing.dimensionsBeforeFullscreen.height + 'px';
      // Set the editor's width (percent string)
      editorDiv.style.width = toggleFullscreenEditing.dimensionsBeforeFullscreen.width;

      // Restore the window's scrolling position
      window.scrollTo(toggleFullscreenEditing.scrollBeforeFullscreen.left, toggleFullscreenEditing.scrollBeforeFullscreen.top);
    }
    codeMirror.refresh();
    codeMirror.focus();
  }

  var getNewCodeMirrorHeightInFullscreen = function() {
    // Should always exist.
    var bottomButtonsHeight = $$('.bottombuttons')[0].getHeight();

    // May not always exist (like in the object editor)
    var toolbarElement = $$('.leftmenu2')[0];
    var toolbarHeight = 0;
    if (toolbarElement) {
      toolbarHeight = toolbarElement.getHeight();
    }

    var result = getWindowHeight() - bottomButtonsHeight - toolbarHeight;

    return result;
  }

  var getWindowHeight = function() {
    return window.innerHeight || (document.documentElement || document.body).clientHeight;
  }

  /* Fullscreen: Resize the editor while in fullscreen and the window gets resized */
  Event.observe(window, 'resize', function(event) {
    var editorDiv = $$('.CodeMirror-fullscreen')[0];

    // If not in fullscreen mode, ignore the resize event.
    if (!editorDiv) {
      return;
    }

    // Recompute and set the height; the width is already set to 100% so we don`t worry about that.
    editorDiv.style.height = getNewCodeMirrorHeightInFullscreen() + 'px';
    editorDiv.CodeMirror.refresh();
  });
}
})();</code>
    </property>
    <property>
      <name>Enable CodeMirror</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>SyntaxHighlighting.EnableSyntaxHighlighting</name>
    <number>0</number>
    <className>XWiki.UIExtensionClass</className>
    <guid>20fdc8ee-f85d-499f-81aa-59711a3f2c98</guid>
    <class>
      <name>XWiki.UIExtensionClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <async_cached>
        <defaultValue>0</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType/>
        <name>async_cached</name>
        <number>3</number>
        <prettyName>Cached</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </async_cached>
      <async_context>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>1</multiSelect>
        <name>async_context</name>
        <number>4</number>
        <prettyName>Context elements</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>, </separator>
        <separators>|, </separators>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <values>action=Action|doc.reference=Document|icon.theme=Icon theme|locale=Language|rendering.defaultsyntax=Default syntax|rendering.restricted=Restricted|rendering.targetsyntax=Target syntax|request.base=Request base URL|request.parameters=Request parameters|request.url=Request URL|request.wiki=Request wiki|user=User|wiki=Wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </async_context>
      <async_enabled>
        <defaultValue>0</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType/>
        <name>async_enabled</name>
        <number>2</number>
        <prettyName>Asynchronous rendering</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </async_enabled>
      <content>
        <disabled>0</disabled>
        <editor>Text</editor>
        <name>content</name>
        <number>1</number>
        <prettyName>Executed Content</prettyName>
        <rows>25</rows>
        <size>120</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <extensionPointId>
        <disabled>0</disabled>
        <name>extensionPointId</name>
        <number>5</number>
        <prettyName>Extension Point ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </extensionPointId>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>6</number>
        <prettyName>Extension ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parameters>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>parameters</name>
        <number>7</number>
        <prettyName>Extension Parameters</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </parameters>
      <scope>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>scope</name>
        <number>8</number>
        <prettyName>Extension Scope</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>wiki=Current Wiki|user=Current User|global=Global</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </scope>
    </class>
    <property>
      <async_cached>0</async_cached>
    </property>
    <property>
      <async_context/>
    </property>
    <property>
      <async_enabled>0</async_enabled>
    </property>
    <property>
      <content>{{velocity output="false"}}
## UIX on a well-known and stable UIXP meant to explicitly activate and initialize Syntax Highlighting, based
## on the configuration, instead of risking to cache the configuration values when using a parsed JSX/SSX.
##
## Syntax highlighting is enabled only in edit mode, but not for mobiles (which are not well supported by CodeMirror 5.x and below).
#set ($isMobile = $request.getHeader("User-Agent").matches(".*(Android|webOS|iPhone|iPad|iPod|Opera Mini).*"))
#if ($xcontext.action == 'edit' &amp;&amp; !$isMobile)
  #includeMacros('SyntaxHighlighting.GetConfiguration')

  ## Only do work if the extension is enabled.
  #if ($configuration.getValue('enabled') == 1)
    ## JavaScript.
    ## Pass the configured theme.
    #set ($theme = "$!{configuration.getValue('theme')}")
    #set ($lineWrapping = ${configuration.getValue('lineWrapping')} == 1)
    #set ($discard = $xwiki.jsx.use('SyntaxHighlighting.EnableSyntaxHighlighting', {'theme' : $theme, 'lineWrapping' : $lineWrapping}))

    ## Styling.
    ## Pass the configured highlightColor.
    #set ($highlightColor = "$!{configuration.getValue('highlightColor')}")
    #set ($discard = $xwiki.ssx.use('SyntaxHighlighting.SyntaxHighlighting', {'highlightColor' : $highlightColor}))
  #end ## enabled check
#end
{{/velocity}}
</content>
    </property>
    <property>
      <extensionPointId>org.xwiki.platform.template.header.after</extensionPointId>
    </property>
    <property>
      <name>org.xwiki.contrib.editortool.editor-tool-highlighting.activation</name>
    </property>
    <property>
      <parameters/>
    </property>
    <property>
      <scope>wiki</scope>
    </property>
  </object>
</xwikidoc>
